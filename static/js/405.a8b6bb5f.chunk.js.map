{"version":3,"file":"static/js/405.a8b6bb5f.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","../node_modules/nanoid/index.browser.js","components/Form/Form.jsx","redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactListItem.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"label\":\"Form_label__8nx+5\",\"input\":\"Form_input__FTtTw\",\"btnAdd\":\"Form_btnAdd__qaLQx\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// import { useState } from 'react';\n// import { nanoid } from 'nanoid';\n// import PropTypes from 'prop-types';\n// import css from '../Form/Form.module.css';\n\n// export default function Form({ onSubmit }) {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   const nameInputId = nanoid();\n//   const numberInputId = nanoid();\n\n//   const handleChange = evt => {\n//     const { name, value } = evt.target;\n//     switch (name) {\n//       case 'name':\n//         setName(value);\n//         break;\n//       case 'number':\n//         setNumber(value);\n//         break;\n//       default:\n//         return;\n//     }\n//   };\n//   const handleSubmit = evt => {\n//     evt.preventDefault();\n//     console.log(name, number);\n//     onSubmit({ name, number });\n//     reset();\n//   };\n//   const reset = () => {\n//     setName('');\n//     setNumber('');\n//   };\n//   return (\n//     <form className={css.form} onSubmit={handleSubmit}>\n//       <label htmlFor={nameInputId} className={css.label}>\n//         Name\n//         <input\n//           className={css.input}\n//           type=\"text\"\n//           name=\"name\"\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           required\n//           value={name}\n//           onChange={handleChange}\n//           id={nameInputId}\n//         />\n//       </label>\n\n//       <label htmlFor={numberInputId} className={css.label}>\n//         Number\n//         <input\n//           className={css.input}\n//           type=\"tel\"\n//           name=\"number\"\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           required\n//           value={number}\n//           onChange={handleChange}\n//           id={numberInputId}\n//         />\n//       </label>\n//       <button type=\"submit\" className={css.btnAdd}>\n//         Add contact\n//       </button>\n//     </form>\n//   );\n// }\n\n// Form.propTypes = {\n//   name: PropTypes.string,\n//   number: PropTypes.number,\n// };\n\nimport css from './Form.module.css';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { nanoid } from 'nanoid';\n\nexport const Form = ({ contacts }) => {\n  const dispatch = useDispatch();\n  const handleSubmit = e => {\n    e.preventDefault();\n    let isAdded = false;\n    const {\n      elements: { name, number },\n    } = e.currentTarget;\n\n    contacts.map(contact => {\n      if (contact.name === name.value) {\n        alert(`${name.value} is already in contacts`);\n        return (isAdded = true);\n      }\n      return isAdded;\n    });\n\n    if (!isAdded) {\n      const addedContact = {\n        name: name.value,\n        number: number.value,\n        id: nanoid(),\n      };\n      dispatch(addContact(addedContact));\n    }\n    e.currentTarget.reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.label}>\n        Name\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n\n      <label className={css.label}>\n        Number\n        <input\n          className={css.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n\n      <button className={css.btnAdd} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nForm.propType = {\n  contacts: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n","export const selectItems = state => state.items;\n\nexport const selectSearchValue = state => state.searchValue;\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"ContactList_contacts__jDmyV\",\"contact\":\"ContactList_contact__0STHS\",\"text\":\"ContactList_text__+NWAW\",\"btnDel\":\"ContactList_btnDel__M+VR9\"};","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport css from './ContactList.module.css';\n\nexport const ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <li key={id}>\n      <p className={css.listItem}>\n        {name} - {number}\n      </p>\n      <button className={css.buttonList} type=\"button\" onClick={handleDelete}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propType = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { selectSearchValue } from 'redux/contacts/selectors';\nimport { ContactListItem } from './ContactListItem';\nimport { Message } from 'components/GlobalStyle';\n\nexport const ContactList = ({ contacts, error }) => {\n  const filter = useSelector(selectSearchValue);\n\n  let filteredContacts = contacts;\n\n  if (filter.searchValue.toLowerCase()) {\n    filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.searchValue.toLowerCase())\n    );\n  }\n\n  return (\n    <>\n      {!contacts.length && !error && (\n        <Message>Your contact list is empty</Message>\n      )}\n      {error && <Message>{error}</Message>}\n      {!filteredContacts.length && Boolean(contacts.length) && (\n        <Message>No contacts found</Message>\n      )}\n      <ul>\n        {filteredContacts.map(({ id, name, number }) => {\n          return (\n            <ContactListItem id={id} name={name} number={number} key={id} />\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nContactList.propType = {\n  contacts: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  error: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const SearchField = styled.input`\n  width: 320px;\n`;\n","import { Label, Form } from 'components/GlobalStyle';\nimport { useDispatch } from 'react-redux';\nimport { setSearchValue } from 'redux/contacts/searchSlice';\nimport { SearchField } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const handleSearch = e => {\n    dispatch(setSearchValue(e.currentTarget.value));\n  };\n\n  return (\n    <Label>\n      Find contacts by name\n      <Form>\n        <SearchField type=\"text\" onChange={handleSearch} />\n      </Form>\n    </Label>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Form } from 'components/Form/Form';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { selectItems } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactsHeader, Message } from 'components/GlobalStyle';\nimport { Helmet } from 'react-helmet';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const { contacts, isLoading, error } = useSelector(selectItems);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <h1>Phonebook</h1>\n      <Form contacts={contacts} />\n      <ContactsHeader>Contacts</ContactsHeader>\n      <Filter />\n      {isLoading && <Message>Loading contacts...</Message>}\n      <ContactList contacts={contacts} error={error} />{' '}\n    </main>\n  );\n}\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Form","contacts","dispatch","useDispatch","className","css","onSubmit","e","preventDefault","isAdded","currentTarget","elements","name","number","map","contact","value","alert","addedContact","addContact","reset","type","pattern","title","required","propType","PropTypes","selectItems","state","items","selectSearchValue","searchValue","ContactListItem","onClick","deleteContact","ContactList","error","filter","useSelector","filteredContacts","toLowerCase","includes","length","Boolean","SearchField","styled","Filter","onChange","setSearchValue","Contacts","isLoading","useEffect","fetchContacts","Helmet"],"sourceRoot":""}